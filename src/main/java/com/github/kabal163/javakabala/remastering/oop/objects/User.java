package com.github.kabal163.javakabala.remastering.oop.objects;

/**
 * Конструктор нужен для того, что инициализировать объект.
 * Например, если мы хотим, чтобы наш объект был имьютабельным (неизменяемым),
 * и значения можно было бы задать только при создании объекта.
 *
 * @author Dmitriy Kanaev
 */
public class User {

    String username;

    String password;

    /**
     * Это пример конструктора, который принимает на вход два параметра:
     * имя пользователя и пароль, и записывает их значения в наши переменные.
     * Обратите внимание на то, что из-за того что переменные называются одинаково,
     * нам необходимо обращаться к глобальным переменным через ключевое слово
     * {@code this}, чтобы компилятор мог понять, и какой именно переменной
     * здесь идет речь.
     *
     * @param username имя пользователя
     * @param password пароль
     */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    /**
     * Пример конструктора, который ничего не принимает, но устанавливает
     * дефолтные значения в наши переменные. Это называется "хардкод" или
     * "hard code", т.к. значения жестко заданы в коде в виде литералов.
     * Это плохо, так делать не нужно (конечно же, бывают исключения)
     */
    public User() {
        this.username = "vlad.k@yandex.ru";
        this.password = "1993pwd";
    }

    /**
     * Пример конструктора, который не принимает ни одного параметра
     * и ничего не делает. По факту, так выглядил бы "конструктор по умолчанию",
     * если бы он был явным
     */
    // Закомментирован, т.к. не является перегруженным и создает конфликт с другим,
    // что мы объявли выше, который также объявлен без параметров
//    public User() {
//    }

    @Override
    public String toString() {
        return "User{" +
            "username='" + username + '\'' +
            ", password='" + password + '\'' +
            '}';
    }
}
