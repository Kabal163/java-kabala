package com.github.kabal163.javakabala.remastering.firstfacing;

/**
 * Каждой новой области видимости доступно все, что находится
 * во внешних, но не наоборот.
 * Например, находясь в методе, мы видимо все переменные на уровне
 * класса, но с уровня класса мы не видим, что находится в методах.
 * Из условного оператора мы видим, что находится на уровне класса
 * и метода, но ни из того, ни из другого не видно, что находится
 * в условном операторе.
 * Это так же называется "телом". Тело класса, тело метода, тело цикла,
 * тело условного оператора и т.д.
 *
 * @author Dmitriy Kanaev
 */
public class Visibility { // Первая область видимости (уровень класса)

    String instanceVariable;

    void myMethod() {
        String name = "Andy";
        if (true) {
            // нам доступны все переменные в выше лежащих областях
            // видимости
            System.out.println(name);
            System.out.println(this.instanceVariable);

            // эта переменная уже объявлена на уровне метода (локально),
            // поэтому мы не можем объявить в этом методе еще одну
            // такую же переменную
//            String name;

            // с глобальными переменными нет такой проблемы, т.к. их
            // компилятор легко может отличить от локальных при помощи
            // ключевого слова this. Если оно есть - значит работаем с
            // переменной на уровне класса, иначе с локальной
            String instanceVariable;

            // вот тут мы объявили какую-то локальную переменную в области
            // видимости оператора if
            String innerVariable;
        }

        // мы видим, что она не доступна во внешней области видимости
//        System.out.println(innerVariable);
    }

    public static void main(String[] args) { // Вложенная (метод)
        if (1 < 2) { // Еще одна вложенная (условный оператор)
            System.out.println("Hello world");
        }
    }
}
